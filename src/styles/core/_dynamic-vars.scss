@use "sass:list";
@use "./prop-list";

@mixin usetVars($prefix, $propKeyValuePairs...) {
  @include usetVarsThemed($prefix, null, $propKeyValuePairs...);
}

@mixin useVars($prefix, $propKeyValuePairs...) {
  @include useVarsThemed($prefix, null, $propKeyValuePairs...);
}

@mixin setVars($prefix, $propKeyValuePairs...) {
  @include setVarsThemed($prefix, null, $propKeyValuePairs...);
}

@mixin usetVarsThemed($prefix, $theme, $propKeyValuePairs...) {
  @include _renderVars($prefix, $theme, true, true, $propKeyValuePairs...);
}

@mixin useVarsThemed($prefix, $theme, $propKeyValuePairs...) {
  @include _renderVars($prefix, $theme, true, false, $propKeyValuePairs...);
}

@mixin setVarsThemed($prefix, $theme, $propKeyValuePairs...) {
  @include _renderVars($prefix, $theme, false, true, $propKeyValuePairs...);
}

@mixin _renderVars(
  $prefix,
  $theme,
  $renderUsages,
  $renderSetups,
  $propKeyValuePairs...
) {
  $usagesAndSetups: _createUsagesAndSetups(
    $prefix,
    $theme,
    $propKeyValuePairs...
  );

  @if $renderUsages {
    @include _renderUsages(list.nth($usagesAndSetups, 1));
  }

  @if $renderSetups {
    @include _renderSetups(list.nth($usagesAndSetups, 2));
  }
}

@function _createUsagesAndSetups($prefix, $theme, $propKeyValuePairs...) {
  $usages: ();
  $setups: ();

  $varNamePropValueTuples: _createVarNamePropValueTuples(
    $prefix,
    $theme,
    $propKeyValuePairs...
  );

  @each $item in $varNamePropValueTuples {
    $varName: list.nth($item, 1);
    $prop: list.nth($item, 2);
    $value: list.nth($item, 3);

    $usages: list.append($usages, ($prop, $varName));
    $setups: list.append($setups, ($varName, $value));
  }

  @return ($usages, $setups);
}

@function _createVarNamePropValueTuples(
  $prefix,
  $theme,
  $propKeyValuePairs...
) {
  $result: ();

  @each $propKeyValuePair in $propKeyValuePairs {
    @if list.length($propKeyValuePair) > 2 {
      @error _createErrorInvalidPropertyKeyValuePairLength($propKeyValuePair);
    }

    $propKey: list.nth($propKeyValuePair, 1);
    $prop: prop-list.getProp($propKey);
    $value: null;

    @if not $prop {
      @error _createErrorInvalidPropertyKey($propKey);
    }

    @if list.length($propKeyValuePair) == 2 {
      $value: list.nth($propKeyValuePair, 2);
    }

    $varName: _createVarName($prefix, $prop, $theme);

    $result: list.append($result, ($varName, $prop, $value));
  }

  @return $result;
}

@function _createErrorInvalidPropertyKeyValuePairLength($propKeyValuePair) {
  @return "_dynamic-vars.scss: Property key-value pair has invalid length (max 2) (#{$propKeyValuePair}). This might happen when the css value is itself comma-separated (e.g. for the transition property) - in that case, wrap the whole value in parenthesis.";
}

@function _createErrorInvalidPropertyKey($propKey) {
  @return "_dynamic-vars.scss: Property key not defined (#{$propKey}). Look at ./_prop-list.scss to see all defined property keys.";
}

@function _createVarName($prefix, $prop, $theme: null) {
  $result: --#{$prefix}-#{$prop};

  @if not $theme {
    @return $result;
  }

  @return #{$result}-theme-#{$theme};
}

@mixin _renderUsages($usages) {
  @each $usage in $usages {
    $prop: list.nth($usage, 1);
    $varName: list.nth($usage, 2);

    @include _renderUsage($prop, $varName);
  }
}

@mixin _renderSetups($setups) {
  @each $setup in $setups {
    $varName: list.nth($setup, 1);
    $value: list.nth($setup, 2);

    @include _renderSetup($varName, $value);
  }
}

@mixin _renderUsage($prop, $varName) {
  #{$prop}: var($varName);
}

@mixin _renderSetup($varName, $value) {
  #{$varName}: $value;
}
